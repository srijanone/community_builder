<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_theme().
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 *
 * @return array
 */
function community_builder_theme($existing, $type, $theme, $path) {
  return [
    'facebook_friend_post' => [
      'variables' => ['block' => NULL],
    ],
    'facebook_friends' => [
      'variables' => ['block' => NULL],
    ]
  ];
}

/**
 * Implements hook_element_info_alter().
 * @param array $types
 */
function community_builder_element_info_alter(array &$types) {
  // Attach our extra CSS for toolbar icons.
  if (isset($types['toolbar'])) {
    $types['toolbar']['#attached']['library'][] = 'community_builder/toolbar';
  }
}

/**
 * Implements hook_form_alter().
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 *
 */
function community_builder_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'user_form') {
    $form['#attached']['library'][] = 'community_builder/user_profile';
  }
  if ($form_id === 'node_posts_form' || $form_id === 'node_posts_edit_form') {
    // Add cancel button on node add and edit form.
    $form['actions']['submit_cancel'] = [
      '#type' => 'submit',
      '#weight' => 0,
      '#value' => t('Cancel'),
      '#attributes' => [
        'onclick' => 'history.back()'
      ]
    ];

    $form['actions']['submit']['#value'] = t('Post');
    $form['#attached']['library'][] = 'community_builder/chosen_js';

    if ($form_id === 'node_posts_form') {
      // Set default value for community.
      $community = \Drupal::request()->query->get('community');
      if ($community) {
        $form['field_community']['widget']['#default_value'] = $community;
        $form['field_community']['widget']['#attributes']['disabled'] = 'disabled';
        // Hide widget when community already selected.
        //    $form['field_community']['#attributes']['style'] = 'display:none';
      }
    }
    if ($form_id === 'node_posts_edit_form') {
      $form['field_community']['widget']['#attributes']['disabled'] = 'disabled';
      // Hide widget when community already selected.
      //    $form['field_community']['#attributes']['style'] = 'display:none';
    }
  }

  // Comment form alter.
  if ($form_id === 'comment_post_comment_form') {
    $form['actions']['submit']['#value'] = t('Post');
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert() for node entities.
 * @param \Drupal\node\NodeInterface $node
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function community_builder_node_insert(NodeInterface $node) {
  // Assign the node post to group entity.
  if ($node->getType() === 'posts') {
    // Get community entity id.
    $groupId = $node->get('field_community')->target_id;
    if (!empty($groupId)) {
      // Load group community.
      $groupEntity = \Drupal\group\Entity\Group::load($groupId);
      $type = $groupEntity->getGroupType()->id() . '-group_node-' . $node->getType();
      $groupContentEntity = \Drupal\group\Entity\GroupContent::create([
        'gid' => $groupEntity->id(),
        'entity_id' => $node->id(),
        'type' => $type,
      ]);
      $groupContentEntity->save();
    }
  }
}
